import java.text.DateFormat
import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
}

allprojects {
    repositories {
        maven { url "https://jitpack.io" }
    }
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
    }
    mavenCentral()
}

enum OperatingSystem {
        MAC, WINDOWS, LINUX, UNKNOWN
}

static def getOperatingSystem() {
    final String os = System.getProperty("os.name")
    if (os.contains("Mac")) {
        return OperatingSystem.MAC
    } else if (os.contains("Windows")) {
        return OperatingSystem.WINDOWS
    } else if (os.contains("Linux")) {
        return OperatingSystem.LINUX
    } else {
        return OperatingSystem.UNKNOWN
    }

}

static def getBotScriptDirectory(project) {
    final String NAME = "OsrsBot"
    final String SCRIPT_DIRECTORY = "/Scripts/Sources/"
    final String env = System.getenv(NAME.toUpperCase().concat("_HOME"))
    if (env == null || env.isEmpty()) {
        String homeDirBuilder = System.getProperty("user.home")
        switch(getOperatingSystem()) {
            case OperatingSystem.LINUX:
            homeDirBuilder += File.separator + ".config"
            break
            case OperatingSystem.MAC:
            homeDirBuilder += (homeDirBuilder == null) ? "~" : ""
            break
            case OperatingSystem.WINDOWS:
            //Do nothing
            break
            default:
            //If you're using Solaris or something you're wrong.
            break
        }
        return (homeDirBuilder + File.separator + NAME + SCRIPT_DIRECTORY)
    }
    return env
}

//This allows us to assign the build directory to where our bot will search for scripts in.
sourceSets {
    main {
        java.getDestinationDirectory().set(file(getBotScriptDirectory(this)))
        java.getDestinationDirectory().set(file("build/scripts"))
    }
}


def runeLiteVersion = getRuneLiteVersion()

static def getRuneLiteVersion() {
    URL url = new URL("http://repo.runelite.net/net/runelite/client/")
    URLConnection urlConnection = url.openConnection()
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(
            urlConnection.getInputStream()))
    Date latestDate = null
    String latestName = null
    String inputLine
    while ((inputLine = bufferedReader.readLine()) != null) {
        inputLine = inputLine.trim().replaceAll(" +", " ")
        if (inputLine.contains("/\">") && inputLine.contains("</a>")) {
            String name = inputLine.substring(inputLine.indexOf("/\">") + 3, inputLine.indexOf("</a>") - 1)
            String removeName = inputLine.substring(inputLine.indexOf("</a>") + 4)
            Date date
            if (!name.contains("SNAPSHOT") && removeName != "") {
                DateFormat df = new SimpleDateFormat(" dd-MMM-yyyy HH:mm -", Locale.ENGLISH)
                date = df.parse(removeName)
                if (latestDate == null || date.after(latestDate)) {
                    latestDate = date
                    latestName = name
                }
            }
        }
    }
    bufferedReader.close()
    return latestName
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'

    implementation group: 'net.sf.jopt-simple', name:'jopt-simple', version: '5.0.4'

    compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion

    testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion
    //We want these both at compile and at runtime.
    //So we use implementation instead of compileOnly or runtimeOnly
    implementation project(":OSRSBot")
    //implementation group: 'com.github.OSRSB', name: 'OsrsBot', version: osrsbotVersion
    implementation project(":DaxWalkerRSB")
    //implementation group: 'com.github.OSRSB', name: 'DaxWalkerRSB', version: daxWalkerVersion
}

group = 'osrsb'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task dockerBuild(type: Exec) {
    commandLine 'docker', 'build', '-t', 'bot-image', '.'
}
task dockerRun(type: Exec) {
    commandLine 'docker', 'run', '-e', 'DISPLAY=host.docker.internal:0', '-t', '--rm', 'bot-image'
}
